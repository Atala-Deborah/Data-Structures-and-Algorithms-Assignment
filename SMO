import numpy as np
import matplotlib.pyplot as plt

# Adjacency matrix for TSP problem
INF = float('inf')
graph = [
    [0, 12, 10, INF, INF, INF, 12],
    [12, 0, 8, 12, INF, INF, INF],
    [10, 8, 0, 11, 3, INF, 9],
    [INF, 12, 11, 0, 11, 10, INF],
    [INF, INF, 3, 11, 0, 6, 7],
    [INF, INF, INF, 10, 6, 0, 9],
    [12, INF, 9, INF, 7, 9, 0]
]

NUM_CITIES = len(graph)
NUM_NODES = NUM_CITIES  # Match number of neurons to cities
learning_rate = 0.1  # Initial learning rate
radius = 3  # Initial neighborhood radius
iterations = 50  # Number of training iterations

# STEP 1: Represent cities as random 2D coordinates for visualization
city_coords = np.random.rand(NUM_CITIES, 2) * 100  # Randomly generate city coordinates (scaled to 100x100)

# STEP 2: Initialize neurons (SOM nodes) as random positions in 2D space
weights = np.random.rand(NUM_NODES, 2)  # Each neuron is a point in 2D space

def euclidean_distance(a, b):
    """Calculate Euclidean distance between two points."""
    return np.sqrt(np.sum((a - b)**2))
